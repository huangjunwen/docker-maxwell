package proxy

import (
	"regexp"
	"strconv"
)

// BinlogPos represents a binlog position. Empty value is invalid.
type BinlogPos struct {
	// FileNum is the suffix of binlog file, the maximum is roughly `1<<31` defined as `MAX_LOG_UNIQUE_FN_EXT` in `sql/sql.h`, ref:
	//   - https://dba.stackexchange.com/questions/94286/what-will-happen-to-the-binary-log-if-it-reaches-its-maximum-value-does-it-res
	//   - http://adamcscott.blogspot.com/2014/06/mysql-55-maximum-sequence-in-binary-logs.html
	FileNum uint32

	// FilePos should be no more than the maximum `----max-binlog-size` (`1<<30`).
	FilePos uint32
}

var (
	binlogPosRegexp = regexp.MustCompile(`^[^\.]+\.(\d+):(\d+)`)
)

// ParseMaxwellBinlogPos is used to parse binlog position generated by maxwell: `mysql-bin.000001:4563719`.
// It returns an invalid BinlogPos if failed.
func ParseMaxwellBinlogPos(s string) BinlogPos {
	parts := binlogPosRegexp.FindStringSubmatch(s)
	if parts == nil {
		return BinlogPos{}
	}

	fileNum, err := strconv.ParseUint(parts[1], 10, 32)
	if err != nil {
		return BinlogPos{}
	}

	filePos, err := strconv.ParseUint(parts[2], 10, 32)
	if err != nil {
		return BinlogPos{}
	}

	return BinlogPos{
		FileNum: uint32(fileNum),
		FilePos: uint32(filePos),
	}

}

// BinlogPosFromUint64 extract fileNum and filePos from an uint64 generated by ToUint64.
func BinlogPosFromUint64(u uint64) BinlogPos {
	return BinlogPos{
		FileNum: uint32(u >> 32),
		FilePos: uint32(u & ((1 << 32) - 1)),
	}
}

// Valid returns true if this is a valid binlog position.
func (pos BinlogPos) Valid() bool {
	// NOTE: the minimal file suffix is 1 and the minimal position is 4
	// (since binlog file starts with a 4-byte magic number)
	//
	// https://dev.mysql.com/doc/internals/en/binary-log-structure-and-contents.html
	return pos.FileNum > 0 && pos.FilePos >= 4
}

// ToUint64 uses an uint64 to represent this binlog position.
func (pos BinlogPos) ToUint64() uint64 {
	fileNum := uint64(pos.FileNum)
	filePos := uint64(pos.FilePos)
	return (fileNum << 32) + filePos
}

// After returns true if pos is larger than another.
func (pos BinlogPos) After(another BinlogPos) bool {
	u := pos.ToUint64()
	if u == 0 {
		return false
	}
	return u > another.ToUint64()
}
